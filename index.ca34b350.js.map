{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n/* eslint-disable no-shadow */ \"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {HTMLElement} gameField\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(cells = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.cells = cells;\n        this.restart();\n    }\n    moveLeft() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let i = 0; i < 4; i++){\n            const row = this.board[i].filter((val)=>val !== 0);\n            const newRow = [];\n            for(let j = 0; j < row.length; j++)if (row[j] === row[j + 1]) {\n                newRow.push(row[j] * 2);\n                this.score += row[j] * 2;\n                j++;\n                moved = true;\n            } else newRow.push(row[j]);\n            while(newRow.length < 4)newRow.push(0);\n            if (this.board[i].toString() !== newRow.toString()) {\n                this.board[i] = newRow;\n                moved = true;\n            }\n        }\n        if (moved) this.addRandomTile();\n        this.checkGameOver();\n    }\n    moveRight() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let i = 0; i < 4; i++){\n            const row = this.board[i].filter((val)=>val !== 0).reverse();\n            const newRow = [];\n            let j = 0;\n            while(j < row.length)if (row[j] === row[j + 1]) {\n                newRow.push(row[j] * 2);\n                this.score += row[j] * 2;\n                j += 2;\n                moved = true;\n            } else {\n                newRow.push(row[j]);\n                j++;\n            }\n            while(newRow.length < 4)newRow.push(0);\n            newRow.reverse();\n            if (this.board[i].toString() !== newRow.toString()) {\n                this.board[i] = newRow;\n                moved = true;\n            }\n        }\n        if (moved) this.addRandomTile();\n        this.checkGameOver();\n    }\n    moveUp() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let col = 0; col < 4; col++){\n            const column = [];\n            for(let row = 0; row < 4; row++)if (this.board[row][col] !== 0) column.push(this.board[row][col]);\n            const newColumn = [];\n            let i = 0;\n            while(i < column.length)if (column[i] === column[i + 1]) {\n                newColumn.push(column[i] * 2);\n                this.score += column[i] * 2;\n                i += 2;\n            } else {\n                newColumn.push(column[i]);\n                i++;\n            }\n            while(newColumn.length < 4)newColumn.push(0);\n            for(let row = 0; row < 4; row++){\n                if (this.board[row][col] !== newColumn[row]) moved = true;\n                this.board[row][col] = newColumn[row];\n            }\n        }\n        if (moved) this.addRandomTile();\n        this.checkGameOver();\n    }\n    moveDown() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let col = 0; col < 4; col++){\n            const column = [];\n            for(let row = 0; row < 4; row++)if (this.board[row][col] !== 0) column.push(this.board[row][col]);\n            const newColumn = [];\n            let i = column.length - 1;\n            while(i >= 0)if (column[i] === column[i - 1]) {\n                newColumn.unshift(column[i] * 2);\n                this.score += column[i] * 2;\n                i -= 2;\n                moved = true;\n            } else {\n                newColumn.unshift(column[i]);\n                i--;\n            }\n            while(newColumn.length < 4)newColumn.unshift(0);\n            for(let row = 0; row < 4; row++){\n                if (this.board[row][col] !== newColumn[row]) moved = true;\n                this.board[row][col] = newColumn[row];\n            }\n        }\n        if (moved) this.addRandomTile();\n        this.checkGameOver();\n    }\n    checkGameOver() {\n        if (this.board.some((row)=>row.includes(2048))) this.status = \"win\";\n        else if (!this.canMove()) this.status = \"lose\";\n    }\n    canMove() {\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            if (this.board[i][j] === 0) return true;\n            if (j < 3 && this.board[i][j] === this.board[i][j + 1]) return true;\n            if (i < 3 && this.board[i][j] === this.board[i + 1][j]) return true;\n        }\n        return false;\n    }\n    displayGameStatus(stat) {\n        const winMessage = document.querySelector(\".message-win\");\n        const loseMessage = document.querySelector(\".message-lose\");\n        winMessage.classList.add(\"hidden\");\n        loseMessage.classList.add(\"hidden\");\n        if (stat === \"win\") winMessage.classList.remove(\"hidden\");\n        else if (stat === \"lose\") loseMessage.classList.remove(\"hidden\");\n        else if (stat === \"playing\") {\n            winMessage.classList.add(\"hidden\");\n            loseMessage.classList.add(\"hidden\");\n        }\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.board.map((row)=>[\n                ...row\n            ]);\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.status = \"playing\";\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.board = this.cells.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        this.board.forEach((row, rowIndex)=>{\n            row.forEach((value, colIndex)=>{\n                if (value === 0) emptyCells.push({\n                    rowIndex: rowIndex,\n                    colIndex: colIndex\n                });\n            });\n        });\n        if (emptyCells.length > 0) {\n            const randomIndex = Math.floor(Math.random() * emptyCells.length);\n            const { rowIndex: rowIndex, colIndex: colIndex } = emptyCells[randomIndex];\n            this.board[rowIndex][colIndex] = Math.random() < 0.9 ? 2 : 4;\n            const cell = document.querySelector(`[data-position=\"${rowIndex}-${colIndex}\"]`);\n            requestAnimationFrame(()=>{\n                cell.classList.add(\"field-cell--new\");\n                setTimeout(()=>{\n                    cell.classList.remove(\"field-cell--new\");\n                }, 300);\n            });\n        }\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$scoreElement = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$startButton = document.getElementById(\"startButton\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nfunction $09e991522ca7e64e$var$updateBoard() {\n    const state = $09e991522ca7e64e$var$game.getState();\n    state.forEach((row, rowIndex)=>{\n        row.forEach((value, colIndex)=>{\n            const cell = document.querySelector(`[data-position=\"${rowIndex}-${colIndex}\"]`);\n            cell.textContent = value !== 0 ? value : \"\";\n            $09e991522ca7e64e$var$updateCellClass(cell, value);\n        });\n    });\n}\nfunction $09e991522ca7e64e$var$updateCellClass(cell, value) {\n    cell.className = \"field-cell\";\n    if (value !== 0) cell.classList.add(`field-cell--${value}`);\n}\nfunction $09e991522ca7e64e$var$updateScore() {\n    $09e991522ca7e64e$var$scoreElement.textContent = $09e991522ca7e64e$var$game.getScore();\n}\nfunction $09e991522ca7e64e$var$updateMessages() {\n    // eslint-disable-next-line no-shadow\n    const status = $09e991522ca7e64e$var$game.getStatus();\n    if (status === \"win\") {\n        $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    } else if (status === \"lose\") {\n        $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    } else if (status === \"idle\") {\n        $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    } else {\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    }\n}\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$startButton.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$updateBoard();\n        $09e991522ca7e64e$var$updateMessages();\n        $09e991522ca7e64e$var$startButton.classList.remove(\"start\");\n        $09e991522ca7e64e$var$startButton.classList.add(\"restart\");\n        $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$updateBoard();\n        $09e991522ca7e64e$var$updateScore();\n        $09e991522ca7e64e$var$updateMessages();\n        $09e991522ca7e64e$var$startButton.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$startButton.classList.add(\"start\");\n        $09e991522ca7e64e$var$startButton.textContent = \"Start\";\n    }\n});\n// eslint-disable-next-line no-shadow\nwindow.addEventListener(\"keydown\", (event)=>{\n    switch(event.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        default:\n            return;\n    }\n    $09e991522ca7e64e$var$updateBoard();\n    $09e991522ca7e64e$var$updateScore();\n    $09e991522ca7e64e$var$updateMessages();\n});\n\n\n//# sourceMappingURL=index.ca34b350.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst scoreElement = document.querySelector('.game-score');\nconst startButton = document.getElementById('startButton');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nfunction updateBoard() {\n  const state = game.getState();\n\n  state.forEach((row, rowIndex) => {\n    row.forEach((value, colIndex) => {\n      const cell = document.querySelector(\n        `[data-position=\"${rowIndex}-${colIndex}\"]`,\n      );\n\n      cell.textContent = value !== 0 ? value : '';\n      updateCellClass(cell, value);\n    });\n  });\n}\n\nfunction updateCellClass(cell, value) {\n  cell.className = 'field-cell';\n\n  if (value !== 0) {\n    cell.classList.add(`field-cell--${value}`);\n  }\n}\n\nfunction updateScore() {\n  scoreElement.textContent = game.getScore();\n}\n\nfunction updateMessages() {\n  // eslint-disable-next-line no-shadow\n  const status = game.getStatus();\n\n  if (status === 'win') {\n    messageWin.classList.remove('hidden');\n    messageLose.classList.add('hidden');\n    messageStart.classList.add('hidden');\n  } else if (status === 'lose') {\n    messageLose.classList.remove('hidden');\n    messageWin.classList.add('hidden');\n    messageStart.classList.add('hidden');\n  } else if (status === 'idle') {\n    messageStart.classList.remove('hidden');\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n  } else {\n    messageStart.classList.add('hidden');\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n  }\n}\n\nstartButton.addEventListener('click', () => {\n  if (startButton.classList.contains('start')) {\n    game.start();\n    updateBoard();\n    updateMessages();\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    startButton.textContent = 'Restart';\n  } else {\n    game.restart();\n    updateBoard();\n    updateScore();\n    updateMessages();\n    startButton.classList.remove('restart');\n    startButton.classList.add('start');\n    startButton.textContent = 'Start';\n  }\n});\n\n// eslint-disable-next-line no-shadow\nwindow.addEventListener('keydown', (event) => {\n  switch (event.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    default:\n      return;\n  }\n\n  updateBoard();\n  updateScore();\n  updateMessages();\n});\n","/* eslint-disable no-shadow */\n'use strict';\n\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {HTMLElement} gameField\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    cells = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.cells = cells;\n    this.restart();\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let i = 0; i < 4; i++) {\n      const row = this.board[i].filter((val) => val !== 0);\n      const newRow = [];\n\n      for (let j = 0; j < row.length; j++) {\n        if (row[j] === row[j + 1]) {\n          newRow.push(row[j] * 2);\n          this.score += row[j] * 2;\n          j++;\n          moved = true;\n        } else {\n          newRow.push(row[j]);\n        }\n      }\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      if (this.board[i].toString() !== newRow.toString()) {\n        this.board[i] = newRow;\n        moved = true;\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n\n    this.checkGameOver();\n  }\n\n  moveRight() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let i = 0; i < 4; i++) {\n      const row = this.board[i].filter((val) => val !== 0).reverse();\n      const newRow = [];\n      let j = 0;\n\n      while (j < row.length) {\n        if (row[j] === row[j + 1]) {\n          newRow.push(row[j] * 2);\n          this.score += row[j] * 2;\n          j += 2;\n          moved = true;\n        } else {\n          newRow.push(row[j]);\n          j++;\n        }\n      }\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      newRow.reverse();\n\n      if (this.board[i].toString() !== newRow.toString()) {\n        this.board[i] = newRow;\n        moved = true;\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n\n    this.checkGameOver();\n  }\n\n  moveUp() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let col = 0; col < 4; col++) {\n      const column = [];\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== 0) {\n          column.push(this.board[row][col]);\n        }\n      }\n\n      const newColumn = [];\n      let i = 0;\n\n      while (i < column.length) {\n        if (column[i] === column[i + 1]) {\n          newColumn.push(column[i] * 2);\n          this.score += column[i] * 2;\n          i += 2;\n        } else {\n          newColumn.push(column[i]);\n          i++;\n        }\n      }\n\n      while (newColumn.length < 4) {\n        newColumn.push(0);\n      }\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== newColumn[row]) {\n          moved = true;\n        }\n        this.board[row][col] = newColumn[row];\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n\n    this.checkGameOver();\n  }\n\n  moveDown() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let col = 0; col < 4; col++) {\n      const column = [];\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== 0) {\n          column.push(this.board[row][col]);\n        }\n      }\n\n      const newColumn = [];\n      let i = column.length - 1;\n\n      while (i >= 0) {\n        if (column[i] === column[i - 1]) {\n          newColumn.unshift(column[i] * 2);\n          this.score += column[i] * 2;\n          i -= 2;\n          moved = true;\n        } else {\n          newColumn.unshift(column[i]);\n          i--;\n        }\n      }\n\n      while (newColumn.length < 4) {\n        newColumn.unshift(0);\n      }\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== newColumn[row]) {\n          moved = true;\n        }\n        this.board[row][col] = newColumn[row];\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n\n    this.checkGameOver();\n  }\n\n  checkGameOver() {\n    if (this.board.some((row) => row.includes(2048))) {\n      this.status = 'win';\n    } else if (!this.canMove()) {\n      this.status = 'lose';\n    }\n  }\n\n  canMove() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.board[i][j] === 0) {\n          return true;\n        }\n\n        if (j < 3 && this.board[i][j] === this.board[i][j + 1]) {\n          return true;\n        }\n\n        if (i < 3 && this.board[i][j] === this.board[i + 1][j]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  displayGameStatus(stat) {\n    const winMessage = document.querySelector('.message-win');\n    const loseMessage = document.querySelector('.message-lose');\n\n    winMessage.classList.add('hidden');\n    loseMessage.classList.add('hidden');\n\n    if (stat === 'win') {\n      winMessage.classList.remove('hidden');\n    } else if (stat === 'lose') {\n      loseMessage.classList.remove('hidden');\n    } else if (stat === 'playing') {\n      winMessage.classList.add('hidden');\n      loseMessage.classList.add('hidden');\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board.map((row) => [...row]);\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.board = this.cells.map((row) => [...row]);\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    this.board.forEach((row, rowIndex) => {\n      row.forEach((value, colIndex) => {\n        if (value === 0) {\n          emptyCells.push({ rowIndex, colIndex });\n        }\n      });\n    });\n\n    if (emptyCells.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const { rowIndex, colIndex } = emptyCells[randomIndex];\n\n      this.board[rowIndex][colIndex] = Math.random() < 0.9 ? 2 : 4;\n\n      const cell = document.querySelector(\n        `[data-position=\"${rowIndex}-${colIndex}\"]`,\n      );\n\n      requestAnimationFrame(() => {\n        cell.classList.add('field-cell--new');\n\n        setTimeout(() => {\n          cell.classList.remove('field-cell--new');\n        }, 300);\n      });\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","cells","restart","moveLeft","status","moved","i","row","board","filter","val","newRow","j","length","push","score","toString","addRandomTile","checkGameOver","moveRight","reverse","moveUp","col","column","newColumn","moveDown","unshift","some","includes","canMove","displayGameStatus","stat","winMessage","document","querySelector","loseMessage","classList","add","remove","getScore","getState","map","getStatus","start","emptyCells","forEach","rowIndex","value","colIndex","randomIndex","Math","floor","random","cell","requestAnimationFrame","setTimeout","$09e991522ca7e64e$var$scoreElement","$09e991522ca7e64e$var$startButton","getElementById","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$updateBoard","state","textContent","className","$09e991522ca7e64e$var$updateScore","$09e991522ca7e64e$var$updateMessages","addEventListener","contains","window","event","key"],"version":3,"file":"index.ca34b350.js.map"}