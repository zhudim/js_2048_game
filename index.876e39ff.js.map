{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\n/* eslint-disable no-shadow */ function $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$71511d61b312f219(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$71511d61b312f219(arr) {\n    return (0, $c50969dc1df61e8b$export$71511d61b312f219)(arr) || (0, $09c9f293d010c0e1$export$71511d61b312f219)(arr) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr) || (0, $38c2d4931cb7a7c4$export$71511d61b312f219)();\n}\n\n\n\"use strict\";\nvar $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var cells = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.cells = cells;\n        this.restart();\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this, _loop = function(i) {\n                    var row = _this.board[i].filter(function(val) {\n                        return val !== 0;\n                    });\n                    var newRow = [];\n                    for(var j = 0; j < row.length; j++)if (row[j] === row[j + 1]) {\n                        newRow.push(row[j] * 2);\n                        _this.score += row[j] * 2;\n                        j++;\n                        moved = true;\n                    } else newRow.push(row[j]);\n                    while(newRow.length < 4)newRow.push(0);\n                    if (_this.board[i].toString() !== newRow.toString()) {\n                        _this.board[i] = newRow;\n                        moved = true;\n                    }\n                };\n                if (this.status !== \"playing\") return;\n                var moved = false;\n                for(var i = 0; i < 4; i++)_loop(i);\n                if (moved) this.addRandomTile();\n                this.checkGameOver();\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this, _loop = function(i) {\n                    var row = _this.board[i].filter(function(val) {\n                        return val !== 0;\n                    }).reverse();\n                    var newRow = [];\n                    var j = 0;\n                    while(j < row.length)if (row[j] === row[j + 1]) {\n                        newRow.push(row[j] * 2);\n                        _this.score += row[j] * 2;\n                        j += 2;\n                        moved = true;\n                    } else {\n                        newRow.push(row[j]);\n                        j++;\n                    }\n                    while(newRow.length < 4)newRow.push(0);\n                    newRow.reverse();\n                    if (_this.board[i].toString() !== newRow.toString()) {\n                        _this.board[i] = newRow;\n                        moved = true;\n                    }\n                };\n                if (this.status !== \"playing\") return;\n                var moved = false;\n                for(var i = 0; i < 4; i++)_loop(i);\n                if (moved) this.addRandomTile();\n                this.checkGameOver();\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                if (this.status !== \"playing\") return;\n                var moved = false;\n                for(var col = 0; col < 4; col++){\n                    var column = [];\n                    for(var row = 0; row < 4; row++)if (this.board[row][col] !== 0) column.push(this.board[row][col]);\n                    var newColumn = [];\n                    var i = 0;\n                    while(i < column.length)if (column[i] === column[i + 1]) {\n                        newColumn.push(column[i] * 2);\n                        this.score += column[i] * 2;\n                        i += 2;\n                    } else {\n                        newColumn.push(column[i]);\n                        i++;\n                    }\n                    while(newColumn.length < 4)newColumn.push(0);\n                    for(var row1 = 0; row1 < 4; row1++){\n                        if (this.board[row1][col] !== newColumn[row1]) moved = true;\n                        this.board[row1][col] = newColumn[row1];\n                    }\n                }\n                if (moved) this.addRandomTile();\n                this.checkGameOver();\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                if (this.status !== \"playing\") return;\n                var moved = false;\n                for(var col = 0; col < 4; col++){\n                    var column = [];\n                    for(var row = 0; row < 4; row++)if (this.board[row][col] !== 0) column.push(this.board[row][col]);\n                    var newColumn = [];\n                    var i = column.length - 1;\n                    while(i >= 0)if (column[i] === column[i - 1]) {\n                        newColumn.unshift(column[i] * 2);\n                        this.score += column[i] * 2;\n                        i -= 2;\n                        moved = true;\n                    } else {\n                        newColumn.unshift(column[i]);\n                        i--;\n                    }\n                    while(newColumn.length < 4)newColumn.unshift(0);\n                    for(var row1 = 0; row1 < 4; row1++){\n                        if (this.board[row1][col] !== newColumn[row1]) moved = true;\n                        this.board[row1][col] = newColumn[row1];\n                    }\n                }\n                if (moved) this.addRandomTile();\n                this.checkGameOver();\n            }\n        },\n        {\n            key: \"checkGameOver\",\n            value: function checkGameOver() {\n                if (this.board.some(function(row) {\n                    return row.includes(2048);\n                })) this.status = \"win\";\n                else if (!this.canMove()) this.status = \"lose\";\n            }\n        },\n        {\n            key: \"canMove\",\n            value: function canMove() {\n                for(var i = 0; i < 4; i++)for(var j = 0; j < 4; j++){\n                    if (this.board[i][j] === 0) return true;\n                    if (j < 3 && this.board[i][j] === this.board[i][j + 1]) return true;\n                    if (i < 3 && this.board[i][j] === this.board[i + 1][j]) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"displayGameStatus\",\n            value: function displayGameStatus(stat) {\n                var winMessage = document.querySelector(\".message-win\");\n                var loseMessage = document.querySelector(\".message-lose\");\n                winMessage.classList.add(\"hidden\");\n                loseMessage.classList.add(\"hidden\");\n                if (stat === \"win\") winMessage.classList.remove(\"hidden\");\n                else if (stat === \"lose\") loseMessage.classList.remove(\"hidden\");\n                else if (stat === \"playing\") {\n                    winMessage.classList.add(\"hidden\");\n                    loseMessage.classList.add(\"hidden\");\n                }\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.board.map(function(row) {\n                    return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n                });\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.status = \"playing\";\n                this.addRandomTile();\n                this.addRandomTile();\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.board = this.cells.map(function(row) {\n                    return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n                });\n                this.score = 0;\n                this.status = \"idle\";\n            }\n        },\n        {\n            key: \"addRandomTile\",\n            value: function addRandomTile() {\n                var emptyCells = [];\n                this.board.forEach(function(row, rowIndex) {\n                    row.forEach(function(value, colIndex) {\n                        if (value === 0) emptyCells.push({\n                            rowIndex: rowIndex,\n                            colIndex: colIndex\n                        });\n                    });\n                });\n                if (emptyCells.length > 0) {\n                    var randomIndex = Math.floor(Math.random() * emptyCells.length);\n                    var _emptyCells_randomIndex = emptyCells[randomIndex], rowIndex = _emptyCells_randomIndex.rowIndex, colIndex = _emptyCells_randomIndex.colIndex;\n                    this.board[rowIndex][colIndex] = Math.random() < 0.9 ? 2 : 4;\n                    var cell = document.querySelector('[data-position=\"'.concat(rowIndex, \"-\").concat(colIndex, '\"]'));\n                    requestAnimationFrame(function() {\n                        cell.classList.add(\"field-cell--new\");\n                        setTimeout(function() {\n                            cell.classList.remove(\"field-cell--new\");\n                        }, 300);\n                    });\n                }\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nvar $197cd56b15c33885$var$scoreElement = document.querySelector(\".game-score\");\nvar $197cd56b15c33885$var$startButton = document.getElementById(\"startButton\");\nvar $197cd56b15c33885$var$messageStart = document.querySelector(\".message-start\");\nvar $197cd56b15c33885$var$messageWin = document.querySelector(\".message-win\");\nvar $197cd56b15c33885$var$messageLose = document.querySelector(\".message-lose\");\nfunction $197cd56b15c33885$var$updateBoard() {\n    var state = $197cd56b15c33885$var$game.getState();\n    state.forEach(function(row, rowIndex) {\n        row.forEach(function(value, colIndex) {\n            var cell = document.querySelector('[data-position=\"'.concat(rowIndex, \"-\").concat(colIndex, '\"]'));\n            cell.textContent = value !== 0 ? value : \"\";\n            $197cd56b15c33885$var$updateCellClass(cell, value);\n        });\n    });\n}\nfunction $197cd56b15c33885$var$updateCellClass(cell, value) {\n    cell.className = \"field-cell\";\n    if (value !== 0) cell.classList.add(\"field-cell--\".concat(value));\n}\nfunction $197cd56b15c33885$var$updateScore() {\n    $197cd56b15c33885$var$scoreElement.textContent = $197cd56b15c33885$var$game.getScore();\n}\nfunction $197cd56b15c33885$var$updateMessages() {\n    // eslint-disable-next-line no-shadow\n    var status = $197cd56b15c33885$var$game.getStatus();\n    if (status === \"win\") {\n        $197cd56b15c33885$var$messageWin.classList.remove(\"hidden\");\n        $197cd56b15c33885$var$messageLose.classList.add(\"hidden\");\n        $197cd56b15c33885$var$messageStart.classList.add(\"hidden\");\n    } else if (status === \"lose\") {\n        $197cd56b15c33885$var$messageLose.classList.remove(\"hidden\");\n        $197cd56b15c33885$var$messageWin.classList.add(\"hidden\");\n        $197cd56b15c33885$var$messageStart.classList.add(\"hidden\");\n    } else if (status === \"idle\") {\n        $197cd56b15c33885$var$messageStart.classList.remove(\"hidden\");\n        $197cd56b15c33885$var$messageWin.classList.add(\"hidden\");\n        $197cd56b15c33885$var$messageLose.classList.add(\"hidden\");\n    } else {\n        $197cd56b15c33885$var$messageStart.classList.add(\"hidden\");\n        $197cd56b15c33885$var$messageWin.classList.add(\"hidden\");\n        $197cd56b15c33885$var$messageLose.classList.add(\"hidden\");\n    }\n}\n$197cd56b15c33885$var$startButton.addEventListener(\"click\", function() {\n    if ($197cd56b15c33885$var$startButton.classList.contains(\"start\")) {\n        $197cd56b15c33885$var$game.start();\n        $197cd56b15c33885$var$updateBoard();\n        $197cd56b15c33885$var$updateMessages();\n        $197cd56b15c33885$var$startButton.classList.remove(\"start\");\n        $197cd56b15c33885$var$startButton.classList.add(\"restart\");\n        $197cd56b15c33885$var$startButton.textContent = \"Restart\";\n    } else {\n        $197cd56b15c33885$var$game.restart();\n        $197cd56b15c33885$var$updateBoard();\n        $197cd56b15c33885$var$updateScore();\n        $197cd56b15c33885$var$updateMessages();\n        $197cd56b15c33885$var$startButton.classList.remove(\"restart\");\n        $197cd56b15c33885$var$startButton.classList.add(\"start\");\n        $197cd56b15c33885$var$startButton.textContent = \"Start\";\n    }\n});\n// eslint-disable-next-line no-shadow\nwindow.addEventListener(\"keydown\", function(event) {\n    switch(event.key){\n        case \"ArrowLeft\":\n            $197cd56b15c33885$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $197cd56b15c33885$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $197cd56b15c33885$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $197cd56b15c33885$var$game.moveDown();\n            break;\n        default:\n            return;\n    }\n    $197cd56b15c33885$var$updateBoard();\n    $197cd56b15c33885$var$updateScore();\n    $197cd56b15c33885$var$updateMessages();\n});\n\n})();\n//# sourceMappingURL=index.876e39ff.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst scoreElement = document.querySelector('.game-score');\nconst startButton = document.getElementById('startButton');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nfunction updateBoard() {\n  const state = game.getState();\n\n  state.forEach((row, rowIndex) => {\n    row.forEach((value, colIndex) => {\n      const cell = document.querySelector(\n        `[data-position=\"${rowIndex}-${colIndex}\"]`,\n      );\n\n      cell.textContent = value !== 0 ? value : '';\n      updateCellClass(cell, value);\n    });\n  });\n}\n\nfunction updateCellClass(cell, value) {\n  cell.className = 'field-cell';\n\n  if (value !== 0) {\n    cell.classList.add(`field-cell--${value}`);\n  }\n}\n\nfunction updateScore() {\n  scoreElement.textContent = game.getScore();\n}\n\nfunction updateMessages() {\n  // eslint-disable-next-line no-shadow\n  const status = game.getStatus();\n\n  if (status === 'win') {\n    messageWin.classList.remove('hidden');\n    messageLose.classList.add('hidden');\n    messageStart.classList.add('hidden');\n  } else if (status === 'lose') {\n    messageLose.classList.remove('hidden');\n    messageWin.classList.add('hidden');\n    messageStart.classList.add('hidden');\n  } else if (status === 'idle') {\n    messageStart.classList.remove('hidden');\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n  } else {\n    messageStart.classList.add('hidden');\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n  }\n}\n\nstartButton.addEventListener('click', () => {\n  if (startButton.classList.contains('start')) {\n    game.start();\n    updateBoard();\n    updateMessages();\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    startButton.textContent = 'Restart';\n  } else {\n    game.restart();\n    updateBoard();\n    updateScore();\n    updateMessages();\n    startButton.classList.remove('restart');\n    startButton.classList.add('start');\n    startButton.textContent = 'Start';\n  }\n});\n\n// eslint-disable-next-line no-shadow\nwindow.addEventListener('keydown', (event) => {\n  switch (event.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    default:\n      return;\n  }\n\n  updateBoard();\n  updateScore();\n  updateMessages();\n});\n","/* eslint-disable no-shadow */\n'use strict';\n\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {HTMLElement} gameField\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    cells = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.cells = cells;\n    this.restart();\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let i = 0; i < 4; i++) {\n      const row = this.board[i].filter((val) => val !== 0);\n      const newRow = [];\n\n      for (let j = 0; j < row.length; j++) {\n        if (row[j] === row[j + 1]) {\n          newRow.push(row[j] * 2);\n          this.score += row[j] * 2;\n          j++;\n          moved = true;\n        } else {\n          newRow.push(row[j]);\n        }\n      }\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      if (this.board[i].toString() !== newRow.toString()) {\n        this.board[i] = newRow;\n        moved = true;\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n\n    this.checkGameOver();\n  }\n\n  moveRight() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let i = 0; i < 4; i++) {\n      const row = this.board[i].filter((val) => val !== 0).reverse();\n      const newRow = [];\n      let j = 0;\n\n      while (j < row.length) {\n        if (row[j] === row[j + 1]) {\n          newRow.push(row[j] * 2);\n          this.score += row[j] * 2;\n          j += 2;\n          moved = true;\n        } else {\n          newRow.push(row[j]);\n          j++;\n        }\n      }\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      newRow.reverse();\n\n      if (this.board[i].toString() !== newRow.toString()) {\n        this.board[i] = newRow;\n        moved = true;\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n\n    this.checkGameOver();\n  }\n\n  moveUp() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let col = 0; col < 4; col++) {\n      const column = [];\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== 0) {\n          column.push(this.board[row][col]);\n        }\n      }\n\n      const newColumn = [];\n      let i = 0;\n\n      while (i < column.length) {\n        if (column[i] === column[i + 1]) {\n          newColumn.push(column[i] * 2);\n          this.score += column[i] * 2;\n          i += 2;\n        } else {\n          newColumn.push(column[i]);\n          i++;\n        }\n      }\n\n      while (newColumn.length < 4) {\n        newColumn.push(0);\n      }\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== newColumn[row]) {\n          moved = true;\n        }\n        this.board[row][col] = newColumn[row];\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n\n    this.checkGameOver();\n  }\n\n  moveDown() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let col = 0; col < 4; col++) {\n      const column = [];\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== 0) {\n          column.push(this.board[row][col]);\n        }\n      }\n\n      const newColumn = [];\n      let i = column.length - 1;\n\n      while (i >= 0) {\n        if (column[i] === column[i - 1]) {\n          newColumn.unshift(column[i] * 2);\n          this.score += column[i] * 2;\n          i -= 2;\n          moved = true;\n        } else {\n          newColumn.unshift(column[i]);\n          i--;\n        }\n      }\n\n      while (newColumn.length < 4) {\n        newColumn.unshift(0);\n      }\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== newColumn[row]) {\n          moved = true;\n        }\n        this.board[row][col] = newColumn[row];\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n\n    this.checkGameOver();\n  }\n\n  checkGameOver() {\n    if (this.board.some((row) => row.includes(2048))) {\n      this.status = 'win';\n    } else if (!this.canMove()) {\n      this.status = 'lose';\n    }\n  }\n\n  canMove() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.board[i][j] === 0) {\n          return true;\n        }\n\n        if (j < 3 && this.board[i][j] === this.board[i][j + 1]) {\n          return true;\n        }\n\n        if (i < 3 && this.board[i][j] === this.board[i + 1][j]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  displayGameStatus(stat) {\n    const winMessage = document.querySelector('.message-win');\n    const loseMessage = document.querySelector('.message-lose');\n\n    winMessage.classList.add('hidden');\n    loseMessage.classList.add('hidden');\n\n    if (stat === 'win') {\n      winMessage.classList.remove('hidden');\n    } else if (stat === 'lose') {\n      loseMessage.classList.remove('hidden');\n    } else if (stat === 'playing') {\n      winMessage.classList.add('hidden');\n      loseMessage.classList.add('hidden');\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board.map((row) => [...row]);\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.board = this.cells.map((row) => [...row]);\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    this.board.forEach((row, rowIndex) => {\n      row.forEach((value, colIndex) => {\n        if (value === 0) {\n          emptyCells.push({ rowIndex, colIndex });\n        }\n      });\n    });\n\n    if (emptyCells.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const { rowIndex, colIndex } = emptyCells[randomIndex];\n\n      this.board[rowIndex][colIndex] = Math.random() < 0.9 ? 2 : 4;\n\n      const cell = document.querySelector(\n        `[data-position=\"${rowIndex}-${colIndex}\"]`,\n      );\n\n      requestAnimationFrame(() => {\n        cell.classList.add('field-cell--new');\n\n        setTimeout(() => {\n          cell.classList.remove('field-cell--new');\n        }, 300);\n      });\n    }\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _ as _array_without_holes } from \"./_array_without_holes.js\";\nimport { _ as _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _ as _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n"],"names":["$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","$227c6742e0ff6f82$export$71511d61b312f219","isArray","iter","Symbol","iterator","from","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","TypeError","$197cd56b15c33885$var$game","protoProps","Game","cells","arguments","instance","Constructor","restart","key","value","_this","status","moved","_loop","row","board","filter","val","newRow","j","push","score","addRandomTile","checkGameOver","reverse","col","column","newColumn","row1","unshift","some","includes","canMove","stat","winMessage","document","querySelector","loseMessage","classList","add","remove","map","emptyCells","forEach","rowIndex","colIndex","randomIndex","Math","floor","random","_emptyCells_randomIndex","cell","concat","requestAnimationFrame","setTimeout","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","$197cd56b15c33885$var$scoreElement","$197cd56b15c33885$var$startButton","getElementById","$197cd56b15c33885$var$messageStart","$197cd56b15c33885$var$messageWin","$197cd56b15c33885$var$messageLose","$197cd56b15c33885$var$updateBoard","state","getState","textContent","className","$197cd56b15c33885$var$updateScore","getScore","$197cd56b15c33885$var$updateMessages","getStatus","addEventListener","contains","start","window","event","moveLeft","moveRight","moveUp","moveDown"],"version":3,"file":"index.876e39ff.js.map"}